/* eslint-disable */
export default async () => {
    const t = {
        ["./users/entities/user.entity"]: await import("./users/entities/user.entity"),
        ["./order/entities/order.entity"]: await import("./order/entities/order.entity"),
        ["./coins/entities/coin.entity"]: await import("./coins/entities/coin.entity"),
        ["./vol_bot_setting/entities/vol-bot-setting.entity"]: await import("./vol_bot_setting/entities/vol-bot-setting.entity"),
        ["./vol_bot_setting/dto/vol-bot-setting.dto"]: await import("./vol_bot_setting/dto/vol-bot-setting.dto")
    };
    return { "@nestjs/swagger": { "models": [[import("./users/entities/user.entity"), { "User": { id: { required: true, type: () => String }, ips: { required: true, type: () => [String] }, perms: { required: true, enum: t["./users/entities/user.entity"].UserPermission, isArray: true }, createdAt: { required: true, type: () => Date }, updatedAt: { required: true, type: () => Date } } }], [import("./auth/dto/sign-in.dto"), { "SignInDto": { id: { required: true, type: () => String, maxLength: 100 }, pw: { required: true, type: () => String, minLength: 8, maxLength: 20, pattern: "/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/" } } }], [import("./auth/dto/sign-up.dto"), { "SignUpDto": { id: { required: true, type: () => String, maxLength: 50 }, ips: { required: true, type: () => [String], minItems: 1 }, pw: { required: true, type: () => String, minLength: 8, maxLength: 20, pattern: "/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/" }, perms: { required: true, enum: t["./users/entities/user.entity"].UserPermission, isArray: true } }, "CreateUserDto": { id: { required: true, type: () => String, maxLength: 50 }, ips: { required: true, type: () => [String], minItems: 1 }, perms: { required: true, enum: t["./users/entities/user.entity"].UserPermission, isArray: true } }, "UpdateUserDto": { id: { required: true, type: () => String, maxLength: 50 }, ips: { required: true, type: () => [String], minItems: 1 }, perms: { required: true, enum: t["./users/entities/user.entity"].UserPermission, isArray: true } } }], [import("./order/entities/order.entity"), { "Order": { id: { required: true, type: () => Number }, userId: { required: true, type: () => String }, exchange: { required: false, type: () => String }, orderId: { required: true, type: () => String }, newClientOrderId: { required: false, type: () => String }, symbol: { required: true, type: () => String }, side: { required: true, enum: t["./order/entities/order.entity"].ORDER_SIDE }, type: { required: true, enum: t["./order/entities/order.entity"].ORDER_TYPE }, quantity: { required: true, type: () => String }, price: { required: false, type: () => String }, timeInForce: { required: false, type: () => String }, status: { required: true, type: () => String }, no_cancel: { required: true, type: () => Number }, is_bot_order: { required: true, type: () => Number }, exchangeCreatedAt: { required: false, type: () => Number }, createdAt: { required: true, type: () => Date } } }], [import("./coins/entities/coin.entity"), { "Coins": { id: { required: true, type: () => Number }, userId: { required: true, type: () => String }, exchange: { required: true, enum: t["./coins/entities/coin.entity"].Exchange }, symbol: { required: true, type: () => String }, name: { required: true, type: () => String }, icon: { required: true, type: () => String }, status: { required: true, enum: t["./coins/entities/coin.entity"].Status }, createdAt: { required: true, type: () => Date }, volBotSettings: { required: true, type: () => [t["./vol_bot_setting/entities/vol-bot-setting.entity"].VolumeBotSettings], description: "\u2705 Use a lazy function, no direct import" } } }], [import("./vol_bot_setting/entities/vol-bot-setting.entity"), { "VolumeBotSettings": { id: { required: true, type: () => Number }, coin: { required: true, type: () => t["./coins/entities/coin.entity"].Coins }, token_balance: { required: true, type: () => Number }, usdt_balance: { required: true, type: () => Number }, priceDecimal: { required: true, type: () => Number }, quantityDecimal: { required: true, type: () => Number }, amountDecimal: { required: true, type: () => Number }, currencyThrottleMinus: { required: true, type: () => String }, currencyThrottlePlus: { required: true, type: () => String }, tokenThrottleMinus: { required: true, type: () => String }, tokenThrottlePlus: { required: true, type: () => String }, refPriceManual: { required: true, type: () => String, nullable: true }, executionTimingMin: { required: true, type: () => Number }, executionTimingMax: { required: true, type: () => Number }, tradeAmountMin: { required: true, type: () => String }, tradeAmountMax: { required: true, type: () => String }, tradeFlow: { required: true, enum: t["./vol_bot_setting/entities/vol-bot-setting.entity"].TRADE_FLOW }, tradeParam: { required: true, type: () => Number }, volumeLimit24H: { required: true, type: () => String }, maxLag: { required: true, type: () => Number }, refPriceDiffPercentMax: { required: true, type: () => String }, version: { required: true, type: () => String }, status: { required: true, type: () => Number }, creds: { required: true, type: () => ({ apiKey: { required: true, type: () => String }, secretKey: { required: true, type: () => String }, apiKeyId: { required: false, type: () => String } }) }, createdAt: { required: true, type: () => Date }, token_balance_locked: { required: false, type: () => Number }, usdt_balance_locked: { required: false, type: () => Number }, token_balance_free: { required: false, type: () => Number }, usdt_balance_free: { required: false, type: () => Number }, change_token_balance: { required: false, type: () => Number }, change_usdt_balance: { required: false, type: () => Number } } }], [import("./vol_bot_setting/dto/vol-bot-setting.dto"), { "CredsDto": { apiKey: { required: true, type: () => String }, secretKey: { required: true, type: () => String }, apiKeyId: { required: false, type: () => String } }, "CreateVolumeBotSettingsDto": { coinId: { required: true, type: () => Number }, refPriceManual: { required: false, type: () => Number }, currencyThrottleMinus: { required: true, type: () => String, pattern: "/^\\d+(\\.\\d+)?$/" }, currencyThrottlePlus: { required: true, type: () => String, pattern: "/^\\d+(\\.\\d+)?$/" }, tokenThrottleMinus: { required: true, type: () => String, pattern: "/^\\d+(\\.\\d+)?$/" }, tokenThrottlePlus: { required: true, type: () => String, pattern: "/^\\d+(\\.\\d+)?$/" }, executionTimingMin: { required: true, type: () => Number, minimum: 1 }, executionTimingMax: { required: true, type: () => Number, minimum: 1 }, tradeAmountMin: { required: true, type: () => Number }, tradeAmountMax: { required: true, type: () => Number }, tradeFlow: { required: true, enum: t["./vol_bot_setting/entities/vol-bot-setting.entity"].TRADE_FLOW }, volumeLimit24H: { required: true, type: () => Number }, maxLag: { required: true, type: () => Number }, refPriceDiffPercentMax: { required: true, type: () => Number }, version: { required: true, type: () => String, maxLength: 20 }, creds: { required: true, type: () => t["./vol_bot_setting/dto/vol-bot-setting.dto"].CredsDto } }, "UpdateVolumeBotSettingsDto": { id: { required: true, type: () => Number }, priceDecimal: { required: true, type: () => Number, minimum: 0, maximum: 20 }, quantityDecimal: { required: true, type: () => Number, minimum: 0, maximum: 20 }, amountDecimal: { required: true, type: () => Number, minimum: 0, maximum: 20 }, refPriceManual: { required: false, type: () => Number }, currencyThrottleMinus: { required: true, type: () => String, pattern: "/^\\d+(\\.\\d+)?$/" }, currencyThrottlePlus: { required: true, type: () => String, pattern: "/^\\d+(\\.\\d+)?$/" }, tokenThrottleMinus: { required: true, type: () => String, pattern: "/^\\d+(\\.\\d+)?$/" }, tokenThrottlePlus: { required: true, type: () => String, pattern: "/^\\d+(\\.\\d+)?$/" }, executionTimingMin: { required: false, type: () => Number }, executionTimingMax: { required: false, type: () => Number }, tradeAmountMin: { required: false, type: () => Number }, tradeAmountMax: { required: false, type: () => Number }, tradeFlow: { required: true, enum: t["./vol_bot_setting/entities/vol-bot-setting.entity"].TRADE_FLOW }, tradeParam: { required: true, type: () => Number, minimum: 0, maximum: 1 }, volumeLimit24H: { required: false, type: () => Number }, maxLag: { required: false, type: () => Number }, refPriceDiffPercentMax: { required: false, type: () => Number }, version: { required: false, type: () => String, maxLength: 20 }, status: { required: true, type: () => Number, minimum: 0, maximum: 2 }, creds: { required: false, type: () => t["./vol_bot_setting/dto/vol-bot-setting.dto"].CredsDto } } }], [import("./balance/entities/balances.entity"), { "Balance": { id: { required: true, type: () => Number }, userId: { required: true, type: () => String }, exchange: { required: true, enum: t["./coins/entities/coin.entity"].Exchange }, asset: { required: true, type: () => String }, free: { required: true, type: () => Number }, locked: { required: true, type: () => Number }, available: { required: true, type: () => Number }, createdAt: { required: true, type: () => Date } } }], [import("./balance/dto/create-balance.dto"), { "CreateBalanceDto": { userId: { required: true, type: () => String }, exchange: { required: true, enum: t["./coins/entities/coin.entity"].Exchange }, asset: { required: true, type: () => String }, free: { required: true, type: () => Number }, locked: { required: true, type: () => Number }, available: { required: true, type: () => Number } }, "UpdateBalanceDto": { id: { required: true, type: () => Number }, userId: { required: false, type: () => String }, exchange: { required: false, enum: t["./coins/entities/coin.entity"].Exchange }, asset: { required: false, type: () => String }, free: { required: false, type: () => String }, locked: { required: false, type: () => String }, available: { required: false, type: () => String } }, "FindUserBalancesDto": { userId: { required: true, type: () => String } }, "FindExcBalancesDto": { userId: { required: true, type: () => String }, exchange: { required: true, enum: t["./coins/entities/coin.entity"].Exchange } } }], [import("./order/dto/get-all-open-order.dto"), { "GetAllOpenOrderDto": { exchange: { required: true, enum: t["./coins/entities/coin.entity"].Exchange }, symbol: { required: true, type: () => String } } }], [import("./coins/dto/create-coin.dto"), { "CreateCoinDto": { userId: { required: true, type: () => String }, exchange: { required: true, enum: t["./coins/entities/coin.entity"].Exchange }, symbol: { required: true, type: () => String, maxLength: 20 }, name: { required: true, type: () => String }, icon: { required: false, type: () => String }, priceDecimal: { required: true, type: () => Number, minimum: 0, maximum: 20 }, quantityDecimal: { required: true, type: () => Number, minimum: 0, maximum: 20 }, amountDecimal: { required: true, type: () => Number, minimum: 0, maximum: 20 }, status: { required: false, enum: t["./coins/entities/coin.entity"].Status } }, "UpdateCoinDto": { id: { required: true, type: () => Number }, exchange: { required: true, enum: t["./coins/entities/coin.entity"].Exchange }, symbol: { required: true, type: () => String, maxLength: 20 }, name: { required: true, type: () => String }, icon: { required: false, type: () => String } }, "FindExcCoinsDto": { exchange: { required: true, enum: t["./coins/entities/coin.entity"].Exchange } }, "BotStatusUpdateDto": { id: { required: true, type: () => Number }, status: { required: false, enum: t["./coins/entities/coin.entity"].Status } } }]], "controllers": [[import("./app.controller"), { "AppController": { "getHello": { type: String } } }], [import("./auth/auth.controller"), { "AuthController": { "signUp": { type: t["./users/entities/user.entity"].User }, "signIn": {}, "changePassword": {}, "passwordReset": { type: t["./users/entities/user.entity"].User }, "signOut": {} } }], [import("./users/users.controller"), { "UsersController": { "signUp": { type: t["./users/entities/user.entity"].User }, "updateUser": { type: t["./users/entities/user.entity"].User }, "getSingle": { type: t["./users/entities/user.entity"].User }, "getMe": { type: t["./users/entities/user.entity"].User }, "deleteUser": {}, "findAll": { type: Object } } }], [import("./mexc/mexc.controller"), { "MexcController": { "createOrder": { type: Object }, "createBatchOrder": { type: Object }, "getBalance": { type: Object }, "deleteOrder": { type: Object } } }], [import("./order/order.controller"), { "OrderController": { "createOrder": { type: t["./order/entities/order.entity"].Order }, "createBatchOrder": { type: Object }, "cancelBatch": {}, "findAll": { type: Object }, "getAllOpenOrders": { type: Object } } }], [import("./vol_bot_setting/vol-bot-setting.controller"), { "VolBotSettingsController": { "update": { type: t["./vol_bot_setting/entities/vol-bot-setting.entity"].VolumeBotSettings }, "reset": { type: t["./vol_bot_setting/entities/vol-bot-setting.entity"].VolumeBotSettings }, "getAll": { type: [t["./vol_bot_setting/entities/vol-bot-setting.entity"].VolumeBotSettings] }, "getByCoin": { type: t["./vol_bot_setting/entities/vol-bot-setting.entity"].VolumeBotSettings } } }], [import("./coins/coin.controller"), { "CoinsController": { "create": { type: t["./vol_bot_setting/entities/vol-bot-setting.entity"].VolumeBotSettings }, "findAll": { type: [Object] }, "findExcCoins": { type: [t["./coins/entities/coin.entity"].Coins] }, "statusUpdate": { type: t["./coins/entities/coin.entity"].Coins }, "update": { type: t["./coins/entities/coin.entity"].Coins }, "remove": {} } }]] } };
};